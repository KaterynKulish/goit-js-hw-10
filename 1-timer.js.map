{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\nconst btn = document.querySelector('button');\nconst input = document.querySelector('input');\nconst timeField = document.querySelector('[data-hours]');\nbtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    userSelectedDate = selectedDates[0];\n    if (selectedDates[0].getTime() <= options.defaultDate.getTime()) {\n      iziToast.warning({\n        title: 'Caution',\n        message: 'Please choose a date in the future',\n      });\n      btn.disabled = true;\n      return;\n    }\n    btn.disabled = false;\n  },\n};\n\nbtn.addEventListener('click', startTimer);\n\nfunction startTimer() {\n  input.disabled = true;\n  btn.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const deltaTime = userSelectedDate.getTime() - Date.now();\n    console.log(deltaTime);\n    const time = convertMs(deltaTime);\n    console.log(time);\n    document.querySelector('[data-days]').textContent = time.days;\n    document.querySelector('[data-hours]').textContent = time.hours;\n    document.querySelector('[data-minutes]').textContent = time.minutes;\n    document.querySelector('[data-seconds]').textContent = time.seconds;\n    if (deltaTime < 1000) {\n      clearInterval(intervalId);\n      input.disabled = false;\n      btn.disabled = true;\n    }\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = pad(Math.floor(ms / day));\n  // Remaining hours\n  const hours = pad(Math.floor((ms % day) / hour));\n  // Remaining minutes\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  // Remaining seconds\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nflatpickr('#datetime-picker', options);\n"],"names":["userSelectedDate","btn","input","options","selectedDates","iziToast","startTimer","intervalId","deltaTime","time","convertMs","ms","days","pad","hours","minutes","seconds","value","flatpickr"],"mappings":"+IAKA,IAAIA,EACJ,MAAMC,EAAM,SAAS,cAAc,QAAQ,EACrCC,EAAQ,SAAS,cAAc,OAAO,EAC1B,SAAS,cAAc,cAAc,EACvDD,EAAI,SAAW,GAEf,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAGrB,GAFA,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BJ,EAAmBI,EAAc,CAAC,EAC9BA,EAAc,CAAC,EAAE,QAAS,GAAID,EAAQ,YAAY,UAAW,CAC/DE,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,oCACjB,CAAO,EACDJ,EAAI,SAAW,GACf,MACN,CACIA,EAAI,SAAW,EAChB,CACH,EAEAA,EAAI,iBAAiB,QAASK,CAAU,EAExC,SAASA,GAAa,CACpBJ,EAAM,SAAW,GACjBD,EAAI,SAAW,GAEf,MAAMM,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAYR,EAAiB,QAAO,EAAK,KAAK,IAAK,EACzD,QAAQ,IAAIQ,CAAS,EACrB,MAAMC,EAAOC,EAAUF,CAAS,EAChC,QAAQ,IAAIC,CAAI,EAChB,SAAS,cAAc,aAAa,EAAE,YAAcA,EAAK,KACzD,SAAS,cAAc,cAAc,EAAE,YAAcA,EAAK,MAC1D,SAAS,cAAc,gBAAgB,EAAE,YAAcA,EAAK,QAC5D,SAAS,cAAc,gBAAgB,EAAE,YAAcA,EAAK,QACxDD,EAAY,MACd,cAAcD,CAAU,EACxBL,EAAM,SAAW,GACjBD,EAAI,SAAW,GAElB,EAAE,GAAI,CACT,CAEA,SAASS,EAAUC,EAAI,CAQrB,MAAMC,EAAOC,EAAI,KAAK,MAAMF,EAAK,KAAG,CAAC,EAE/BG,EAAQD,EAAI,KAAK,MAAOF,EAAK,MAAO,IAAI,CAAC,EAEzCI,EAAUF,EAAI,KAAK,MAAQF,EAAK,MAAO,KAAQ,GAAM,CAAC,EAEtDK,EAAUH,EAAI,KAAK,MAASF,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAEvE,MAAO,CAAE,KAAAC,EAAM,MAAAE,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAC1C,CAEA,SAASH,EAAII,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEAC,EAAU,mBAAoBf,CAAO"}